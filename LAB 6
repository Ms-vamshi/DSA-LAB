Given a Linked List and a number N, write a function that returns the value at the Nth node from 
the end of the Linked List
#include <stdio.h>
#include <stdlib.h>
// Definition for singly-linked list.
struct ListNode {
 int val;
 struct ListNode *next;
};
int getNthFromEnd(struct ListNode* head, int n) {
 struct ListNode* fast = head;
 struct ListNode* slow = head;
 // Move the fast pointer n nodes ahead
 for (int i = 0; i < n; i++) {
 if (fast == NULL) {
 return -1; // Assuming -1 indicates an error
 }
 fast = fast->next;
 }
 // Move both pointers simultaneously until fast reaches the end
 while (fast != NULL) {
 fast = fast->next;
 slow = slow->next;
 }
 return slow->val;
}
// Helper function to create a new node
struct ListNode* newNode(int val) {
 struct ListNode* node = (struct ListNode*)malloc(sizeof(struct ListNode));
 node->val = val;
 node->next = NULL;
 return node;
}
int main() {
 struct ListNode* head = newNode(1);
 head->next = newNode(2);
 head->next->next = newNode(3);
 head->next->next->next = newNode(4);
 head->next->next->next->next = newNode(5);
 int n = 2; // Get the value of the 2nd node from the end
 int result = getNthFromEnd(head, n);
 if (result != -1) {
 printf("The value at the %dth node from the end is: %d\n", n, result);
 } else {
 printf("Invalid value of n or empty list.\n");
 }
 // Free the memory allocated for the linked list nodes
 struct ListNode* current = head;
 while (current != NULL) {
 struct ListNode* temp = current;
 current = current->next;
 free(temp);
 }
 return 0;
}
